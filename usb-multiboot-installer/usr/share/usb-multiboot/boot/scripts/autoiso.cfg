# Sample GRUB script to autodetect operating systems
#
# Copyright (C) 2017  Marcelo Politzer Couto
# Copyright (C) 2010  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

function pathname { regexp -s 2:"$2" '^(\(.*\))/*(/.*)$' "$1"; }
function devname  { regexp -s "$2" '^(\(.*\)).*$' "$1"; }

function partition_label_entry {
    if test "$realdev" != "$saved_dev"; then
        probe -s devlabel -l $realdev
        if test "$devlabel"; then set devlabel=" \"$devlabel\""; fi
        menuentry "${realdev}${devlabel}:" { true }
        set saved_dev="$realdev"
    fi
}

function newdir_scan_entry {
    menuentry "Add directory for new scan" {
        echo 'Please enter the full directory path or press "Enter" to return'
        echo
        echo -n '> '
        read newdir
        if regexp '[[:print:]]' "$newdir"; then
            echo
            scan_isos $newdir
        fi
    }
}

function customcfg_toggle_entry {
    if test -z $autoiso_path; then return; fi
    if test "$customcfg" == "no"; then itemname="Enable"
    else itemname="Disable"; fi
    menuentry "$itemname custom configs" "$autoiso_path"{
        if test "$customcfg" != "no"; then
            set customcfg="no"
        else set customcfg="yes"; fi
        export customcfg
        configfile "$2"
    }
}

function isolinux_iso_entry {
    realdev="$1"
    isopath="$2"
    loopdev="$3"

    if test -f /boot/isolinux/isolinux.cfg; then
        cfgpath=/boot/isolinux/isolinux.cfg
    elif test -f /isolinux/isolinux.cfg; then
        cfgpath=/isolinux/isolinux.cfg
    elif test -f /boot/x86_64/loader/isolinux.cfg; then
        cfgpath=/boot/x86_64/loader/isolinux.cfg
    elif test -f /boot/syslinux/local/menu.cfg; then #MagOS Linux
        cfgpath=/boot/syslinux/local/menu.cfg
    else
        return 1
    fi

    echo isolinux based $isopath: yes
    partition_label_entry
    menuentry "${indent}${isopath} (isolinux)" "$realdev" "$isopath" "$cfgpath" {
        set device="$2"
        set iso_path="$3"
        set cfgpath="$4"

        probe -s rootuuid -u $device
        loopback loop "${device}${iso_path}"
        set root=(loop)

        # this flag requires a hacked grub!!

        # language settings
        set linux_extra="$langset"

        # arch based
        set linux_extra="${linux_extra} img_dev=/dev/disk/by-uuid/$rootuuid img_loop=$iso_path earlymodules=loop"

        # gentoo based
        set linux_extra="${linux_extra} isofrom=$iso_path"

        # ubuntu based, fedora, opensuse, rosa
        set linux_extra="${linux_extra} iso-scan/filename=$iso_path"

        # antiX based
        set linux_extra="${linux_extra} from=all fromiso=$iso_path"

        # Grml Live Linux
        set linux_extra="${linux_extra} findiso=$iso_path"

        # sysrcd
        set linux_extra="${linux_extra} isoloop=$iso_path"

        # MagOS Linux (UIRD)
        set linux_extra="${linux_extra} uird.from=${iso_path},/MagOS uird.force scantimeout=3"

        # TODO: SUSE based
        #set linux_extra="${linux_extra} isofrom_device=/dev/disk/by-uuid/$rootuuid isofrom_system=$iso_path"

        # others?
        set linux_extra="${linux_extra} isoboot=$iso_path"

        export linux_extra
        syslinux_configfile $cfgpath
    }
    return 0
}

# iso_path is used by the loopback target, do not change!
function loopback_iso_entry {
    realdev="$1"
    isopath="$2"
    loopdev="$3"

    if test -f /boot/grub/loopback.cfg; then
        cfgpath=/boot/grub/loopback.cfg
    elif test -f /grub/loopback.cfg; then
        cfgpath=/grub/loopback.cfg
    else
        return 1
    fi

    echo loopback.cfg $isopath: yes
    partition_label_entry
    menuentry "${indent}${isopath} (loopback)" "$realdev" "$isopath" "$cfgpath" {
        set device="$2"
        set iso_path="$3"
        set cfgpath="$4"

        loopback loop "${device}${iso_path}"
        set root=(loop)

        probe -s rootuuid -u $device
        set iso_path="$iso_path $langset"
        export rootuuid iso_path

        configfile $cfgpath
        loopback -d loop
    }
    return 0
}

function bsdfamily_iso_entry {
    realdev="$1"
    isopath="$2"

    if   test -f /FreeNAS-MANIFEST; then kpath=/boot/kernel/kernel; # FreeNAS
    elif test -f /boot/zfsloader;   then kpath=/boot/kernel/kernel; # FreeBSD
    else return 1; fi

    echo bsd-family.cfg $isopath: yes
    partition_label_entry
    menuentry "${indent}${isopath} (BSD family)" "$realdev" "$isopath" {
        set device="$2"
        set iso_path="$3"

        loopback loop "${device}${iso_path}"
        set root=(loop)

        echo "This may take a while..."
        kfreebsd /boot/kernel/kernel
        kfreebsd_module "${device}${iso_path}" type=mfs_root
        set kFreeBSD.vfs.root.mountfrom=cd9660:/dev/md0
    }
    return 0
}

function custom_iso_entry {
    realdev="$1"
    isopath="$2"
    loopdev="$3"

    if test "$customcfg" == "no"; then return 1; fi

    for isocfg in ${isocfg_dir}/*.cfg; do
        unset uniqpath
        unset isopattern
        source $isocfg

          if test "$uniqpath" -a -e $uniqpath; then true
        elif test  -z "$isopattern"; then continue
        elif ! regexp "$isopattern" "$isopath"; then continue; fi

        probe -s rootuuid -u $realdev
        probe -s isolabel -l $loopdev
        set iso_path=$isopath
        source $isocfg

        echo custom config $isopath: yes
        partition_label_entry
        menuentry "${indent}${isopath} (custom)" --source "\
            loopback loop "${realdev}${isopath}"
            set root=(loop)
            echo 'Loading kernel …'
            linux $linux $linux_extra
            echo 'Loading initial ramdisk …'
            initrd $initrd"
        return 0
    done
    return 1
}

function scan_isos {
    isodirs="$1"
    echo "Scanning …"

    for dev in (*); do
        for dir in $isodirs; do
            for file in ${dev}/${dir}/*.iso ${dev}/${dir}/*.ISO; do
                if ! test -f "$file"; then continue; fi

                pathname $file isopath

                if ! loopback loopdev_scan "$file"; then continue; fi
                saved_root=$root
                set root=(loopdev_scan)

                  if    custom_iso_entry $dev $isopath (loopdev_scan); then set applied=yes
                elif  loopback_iso_entry $dev $isopath (loopdev_scan); then set applied=yes
                elif  isolinux_iso_entry $dev $isopath (loopdev_scan); then set applied=yes
                elif bsdfamily_iso_entry $dev $isopath (loopdev_scan); then set applied=yes
                else true; fi

                set root=$saved_root
                loopback -d loopdev_scan
            done
        done
    done
    if test -z "$applied"; then
        echo
        echo 'No ISO images found for booting'
        echo 'Press "Escape" to continue'
        sleep --interruptible 9999
    else unset applied
    fi
    return 0
}

## XXX Remove later
#insmod serial
#serial
#terminal_output --append serial
## terminal_input --append serial

insmod part_gpt
insmod part_msdos
insmod regexp

regexp -s langcode '(^..)' "$lang"
langset="lang=${lang} debian-installer/language=${langcode} keyboard-configuration/layoutcode?=${langcode}"
if test "$2"; then set autoiso_path="$2"; else set autoiso_path="${prefix}/scripts/autoiso.cfg"; fi
if test -z "$customcfg"; then set customcfg="no"; fi #comment out to enable custom configs by default
indent="     " #indent for menu entries
isocfg_dir="${prefix}/iso-configs"

scan_isos "$iso_dirs"
newdir_scan_entry
customcfg_toggle_entry

